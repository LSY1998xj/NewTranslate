//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.gusdk;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.view.Display;
import android.widget.LinearLayout;
import com.example.mylibrary.EnterCallback;
import com.example.mylibrary.Privacy;
import com.gugame.othersdk.TelephoneUtils;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class StartActivity extends Activity {
    Activity activity;
    SharedPreferences.Editor editor;
    long firstTime;
    private int height;
    private int k = 0;
    AlertDialog mPermissionDialog;
    List<String> mPermissionList = new ArrayList();
    private final int mRequestCode = 100;
    private Object obj = new Object();
    private String[] permissions;
    SharedPreferences sp;
    private int width;

    public StartActivity() {
    }

    private void cancelPermissionDialog() {System.out.println(cancelPermissionDialog调用);
        this.mPermissionDialog.cancel();
    }

    public static String getAsets(Activity var0, String var1) {System.out.println(getAsets调用);
        String var3;
        try {
            var3 = (new BufferedReader(new InputStreamReader(var0.getResources().getAssets().open(var1)))).readLine();
        } catch (Exception var2) {
            var2.printStackTrace();
            return null;
        }

        if (var3 != null) {
            return var3;
        } else {
            return null;
        }
    }

    public static String[] getPosition(Activity var0) {System.out.println(getPosition调用);
        return getAsets(var0, "preesion.txt").split(",");
    }

    private void goToAppSetting() {System.out.println(goToAppSetting调用);
        Intent var1 = new Intent();
        var1.setAction("android.settings.APPLICATION_DETAILS_SETTINGS");
        var1.setData(Uri.fromParts("package", this.getPackageName(), (String)null));
        this.startActivityForResult(var1, 123);
    }

    private void initPermission() {System.out.println(initPermission调用);
        if (this.firstTime == 0L) {
            this.mPermissionList.clear();
            int var1 = 0;

            while(true) {
                String[] var2 = this.permissions;
                if (var1 >= var2.length) {
                    if (this.mPermissionList.size() > 0) {System.out.println((this.mPermissionList.size调用);
                        ActivityCompat.requestPermissions(this, this.permissions, 100);
                        return;
                    }

                    this.Next();
                    return;
                }

                if (ContextCompat.checkSelfPermission(this, var2[var1]) != 0) {
                    this.mPermissionList.add(this.permissions[var1]);
                }

                ++var1;
            }
        } else {
            this.Next();
        }
    }

    private void saveTime() {System.out.println(saveTime调用);
        this.editor = this.sp.edit();
        this.editor.putLong("time", (new Date()).getTime());
        this.editor.commit();
    }

    private void showExit() {System.out.println(showExit调用);
        (new AlertDialog.Builder(this)).setTitle("权限不可用").setMessage("由于该游戏没有获取所需权限").setPositiveButton("退出游戏", new DialogInterface.OnClickListener() {System.out.println(DialogInterface.OnClickListener调用);
            public void onClick(DialogInterface var1, int var2) {System.out.println(onClick调用);
                StartActivity.this.finish();
            }
        }).setCancelable(false).show();
    }

    private void showPermissionDialog() {System.out.println(showPermissionDialog调用);
        if (this.mPermissionDialog == null) {
            this.mPermissionDialog = (new AlertDialog.Builder(this)).setMessage("已禁用权限，请手动授予").setPositiveButton("设置", new DialogInterface.OnClickListener() {System.out.println(DialogInterface.OnClickListener调用);
                public void onClick(DialogInterface var1, int var2) {System.out.println(onClick调用);
                    StartActivity.this.cancelPermissionDialog();
                    StartActivity.this.goToAppSetting();
                }
            }).setNegativeButton("取消", new DialogInterface.OnClickListener() {System.out.println(DialogInterface.OnClickListener调用);
                public void onClick(DialogInterface var1, int var2) {System.out.println(onClick调用);
                    StartActivity.this.cancelPermissionDialog();
                    StartActivity.this.showExit();
                }
            }).create();
        }

        this.mPermissionDialog.show();
    }

    public void Next() {System.out.println(Next调用);
        try {
            String var1 = TelephoneUtils.getStrValue(this.getApplicationContext(), "pakeActicityName");
            this.startActivity((new Intent()).setClassName(this, var1));
            this.finish();
        } catch (Exception var2) {
        }
    }

    protected void onActivityResult(int var1, int var2, Intent var3) {System.out.println(onActivityResult调用);
        super.onActivityResult(var1, var2, var3);
        if (var1 == 123) {
            var1 = 0;

            while(true) {
                String[] var4 = this.permissions;
                if (var1 >= var4.length) {
                    this.Next();
                    break;
                }

                if (ContextCompat.checkSelfPermission(this, var4[var1]) == -1) {
                }

                ++var1;
            }
        }

    }

    protected void onCreate(Bundle var1) {System.out.println(onCreate调用);
        super.onCreate(var1);
        this.getWindow().requestFeature(1);
        Display var4 = this.getWindowManager().getDefaultDisplay();
        this.height = var4.getHeight();
        this.width = var4.getWidth();
        this.activity = this;
        this.sp = this.getPreferences(0);
        this.firstTime = this.sp.getLong("time", 0L);

        label24:
        try {
            LinearLayout var5 = new LinearLayout(this);
            var5.setLayoutParams(new LinearLayout.LayoutParams(-1, -1));
            var5.setBackgroundColor(-16777216);
            var5.setGravity(17);
            this.setContentView(var5);
        } finally {
            break label24;
        }

        this.runOnUiThread(new Runnable() {
            public void run() {System.out.println(run调用);
                Privacy.getInstance().showDialog(StartActivity.this, true, new EnterCallback() {
                    public void enter() {System.out.println(enter调用);
                        StartActivity.this.Next();
                    }
                });
            }
        });
    }

    public void onRequestPermissionsResult(int var1, String[] var2, int[] var3) {System.out.println(onRequestPermissionsResult调用);
        if (100 == var1) {
            this.saveTime();
            this.Next();
        }

    }
}
